{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Layout","Footer","Sider","Content","App","componentDidMount","props","form","validateFields","handleSubmit","e","preventDefault","err","values","console","log","fieldsError","this","getFieldDecorator","getFieldsError","getFieldError","isFieldTouched","usernameError","passwordError","style","height","windowHeight","color","layout","onSubmit","Item","validateStatus","help","rules","required","message","prefix","type","placeholder","htmlType","disabled","Object","keys","some","field","React","PureComponent","WrappedHorizontalLoginForm","Form","create","name","windowSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,2OCMnCC,EAAmCC,IAAnCD,OAAQE,EAA2BD,IAA3BC,OAAQC,EAAmBF,IAAnBE,MAAOC,EAAYH,IAAZG,Q,IAMzBC,E,2MACJC,kBAAoB,WAClB,EAAKC,MAAMC,KAAKC,kB,EAGlBC,aAAe,SAAAC,GACbA,EAAEC,iBACF,EAAKL,MAAMC,KAAKC,eAAe,SAACI,EAAKC,GAC9BD,GACHE,QAAQC,IAAI,4BAA6BF,M,wEAKrC,IAlBOG,EAkBR,EACsEC,KAAKX,MAAMC,KAAhFW,EADD,EACCA,kBAAmBC,EADpB,EACoBA,eAAgBC,EADpC,EACoCA,cAAeC,EADnD,EACmDA,eAGpDC,EAAgBD,EAAe,aAAeD,EAAc,YAC5DG,EAAgBF,EAAe,aAAeD,EAAc,YAElE,OACE,kBAAC,IAAD,CAAQI,MAAO,CAAEC,OAAQR,KAAKX,MAAMoB,eAClC,kBAACxB,EAAD,KACE,0BAAMsB,MAAO,CAAEG,MAAO,QAAtB,QAEF,kBAAC,IAAD,KACE,kBAAC5B,EAAD,eACA,kBAACI,EAAD,KACE,kBAAC,IAAD,CAAMyB,OAAO,SAASC,SAAUZ,KAAKR,cACnC,kBAAC,IAAKqB,KAAN,CAAWC,eAAgBT,EAAgB,QAAU,GAAIU,KAAMV,GAAiB,IAC7EJ,EAAkB,WAAY,CAC7Be,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCADpCjB,CAGC,kBAAC,IAAD,CACEkB,OAAQ,kBAAC,IAAD,CAAMC,KAAK,OAAOb,MAAO,CAAEG,MAAO,qBAC1CW,YAAY,eAIlB,kBAAC,IAAKR,KAAN,CAAWC,eAAgBR,EAAgB,QAAU,GAAIS,KAAMT,GAAiB,IAC7EL,EAAkB,WAAY,CAC7Be,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCADpCjB,CAGC,kBAAC,IAAD,CACEkB,OAAQ,kBAAC,IAAD,CAAMC,KAAK,OAAOb,MAAO,CAAEG,MAAO,qBAC1CU,KAAK,WACLC,YAAY,eAIlB,kBAAC,IAAKR,KAAN,KACE,kBAAC,IAAD,CAAQO,KAAK,UAAUE,SAAS,SAASC,UAxDtCxB,EAwD0DG,IAvDpEsB,OAAOC,KAAK1B,GAAa2B,KAAK,SAAAC,GAAK,OAAI5B,EAAY4B,OAuD5C,aAMN,kBAAC3C,EAAD,qB,GA1DQ4C,IAAMC,eAiElBC,EAA6BC,IAAKC,OAAO,CAAEC,KAAM,oBAApBF,CAA0C5C,GAE9D+C,MAAWJ,GCnENK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6af917e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport windowSize from 'react-window-size';\nimport { Layout, Form, Icon, Input, Button } from 'antd';\nconst { Header, Footer, Sider, Content } = Layout;\n\nfunction hasErrors(fieldsError) {\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\nclass App extends React.PureComponent {\n  componentDidMount = () => {\n    this.props.form.validateFields();\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  };\n\n  render() {\n    const { getFieldDecorator, getFieldsError, getFieldError, isFieldTouched } = this.props.form;\n\n    // Only show error after a field is touched.\n    const usernameError = isFieldTouched('username') && getFieldError('username');\n    const passwordError = isFieldTouched('password') && getFieldError('password');\n\n    return (\n      <Layout style={{ height: this.props.windowHeight }} >\n        <Sider>\n          <span style={{ color: 'red' }} >hii</span>\n        </Sider>\n        <Layout>\n          <Header>Header</Header>\n          <Content>\n            <Form layout=\"inline\" onSubmit={this.handleSubmit}>\n              <Form.Item validateStatus={usernameError ? 'error' : ''} help={usernameError || ''}>\n                {getFieldDecorator('username', {\n                  rules: [{ required: true, message: 'Please input your username!' }],\n                })(\n                  <Input\n                    prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                    placeholder=\"Username\"\n                  />,\n                )}\n              </Form.Item>\n              <Form.Item validateStatus={passwordError ? 'error' : ''} help={passwordError || ''}>\n                {getFieldDecorator('password', {\n                  rules: [{ required: true, message: 'Please input your Password!' }],\n                })(\n                  <Input\n                    prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                    type=\"password\"\n                    placeholder=\"Password\"\n                  />,\n                )}\n              </Form.Item>\n              <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\" disabled={hasErrors(getFieldsError())}>\n                  Log in\n                </Button>\n              </Form.Item>\n            </Form>\n          </Content>\n          <Footer>Footer</Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nconst WrappedHorizontalLoginForm = Form.create({ name: 'horizontal_login' })(App);\n\nexport default windowSize(WrappedHorizontalLoginForm);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}